import telebot
import my_token

bot = telebot.TeleBot(my_token.API_TOKEN)


# –û—á–µ—Ä–µ–¥–∏ –≤ —á–∞—Ç–∞—Ö
queues = {}
# –†–∞–±–æ—á–∞—è —Ç–µ–º–∞ –¥–ª—è —á–∞—Ç–æ–≤
active_topics = {}

# –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_name(user):
    if user.username:
        return f"@{user.username}"
    else:
        return f"{user.first_name} {user.last_name}".strip()


# –ü–æ–ª—É—á–∏—Ç—å –æ—á–µ—Ä–µ–¥—å —á–∞—Ç–∞
def get_queue(chat_id):
    if chat_id not in queues:
        queues[chat_id] = []
    return queues[chat_id]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —á–∞—Ç–∞
def is_chat_owner(chat_id, user_id):
    try:
        admins = bot.get_chat_administrators(chat_id)
        for admin in admins:
            if admin.user.id == user_id and admin.status == 'creator':
                return True
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —á–∞—Ç–∞:", e)
    return False

def is_valid_topic(message):
    chat_id = message.chat.id
    thread_id = message.message_thread_id
    return chat_id in active_topics and active_topics[chat_id] == thread_id

# –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
def enable_this_topic(message):
    bot.reply_to(message, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /enableThisTopic –≤ —Ç–æ–π —Ç–µ–º–µ —á–∞—Ç"
                          "–∞ –∫–æ—Ç–æ—Ä—É—é –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞–±–æ—á–µ–π —Ç–µ–º–æ–π –¥–ª—è –±–æ—Ç–∞, –∫—Ä–æ–º–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–º—ã.")

# –ü–æ–º–æ—â—å
@bot.message_handler(commands=['help'])
def enable_this_topic(message):
    help_text = (
        "üìã <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n"
        "/start ‚Äî —Å—Ç–∞—Ä—Ç\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/queue ‚Äî –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å\n"
        "/skip ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å 1 —á–µ–ª–æ–≤–µ–∫–∞ –≤–ø–µ—Ä—ë–¥\n"
        "/quit ‚Äî –≤—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏\n"
        "/current ‚Äî –∫—Ç–æ —Å–µ–π—á–∞—Å –ø–µ—Ä–≤—ã–π\n"
        "/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å\n"
        "/next ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –ø–æ –æ—á–µ—Ä–µ–¥–∏\n"
        "/enableThisTopic ‚Äî —Å–¥–µ–ª–∞—Ç—å —ç—Ç—É —Ç–µ–º—É —Ä–∞–±–æ—á–µ–π"
    )
    bot.reply_to(message, help_text, parse_mode="HTML")


# –°–¥–µ–ª–∞—Ç—å —Ç–µ–º—É —Ä–∞–±–æ—á–µ–π, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ—Ä–∞–±–æ—á–∏–µ
@bot.message_handler(commands=['enableThisTopic'])
def enable_this_topic(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    thread_id = message.message_thread_id


    if message.chat.type != "supergroup":
        bot.reply_to(message, "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö —Å —Ç–µ–º–∞–º–∏.")
        return

    if thread_id is None:
        bot.reply_to(message, "–ö–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ç–µ–º—ã (–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π).")
        return

    if not is_chat_owner(chat_id, user_id):
        bot.reply_to(message, "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —Ç–µ–º—É.")
        return

    active_topics[chat_id] = thread_id
    bot.reply_to(message, f"–ë–æ—Ç —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–π —Ç–µ–º–µ (ID {thread_id}).")

#–í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å
@bot.message_handler(commands=['queue'])
def handle_queue(message):
    if not is_valid_topic(message):
        return
    chat_id = message.chat.id
    user_id = message.from_user.id
    queue = get_queue(chat_id)

    if any(u['id'] == user_id for u in queue):
        position = next(i for i, u in enumerate(queue) if u['id'] == user_id) + 1
        bot.reply_to(message, f"–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {position}.")
    else:
        queue.append({
            'id': user_id,
            'username': get_user_name(message.from_user)
            })
        bot.reply_to(message, f"–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å. –í–∞—à –Ω–æ–º–µ—Ä: {len(queue)}.")

# –í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
@bot.message_handler(commands=['quit'])
def handle_quit(message):
    if not is_valid_topic(message):
        return
    chat_id = message.chat.id
    user_id = message.from_user.id
    queue = get_queue(chat_id)

    for user in queue:
        if user['id'] == user_id:
            queue.remove(user)
            bot.reply_to(message, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
            return
    bot.reply_to(message, "–í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏.")

# –°–ª–µ–¥—É—é—â–∏–π (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω—Ç–æ–Ω –ê–Ω–¥—Ä–µ–µ–≤–∏—á))
@bot.message_handler(commands=['next'])
def handle_next(message):
    if not is_valid_topic(message):
        return
    chat_id = message.chat.id
    user_id = message.from_user.id
    queue = get_queue(chat_id)

    if not is_chat_owner(chat_id, user_id):
        bot.reply_to(message, "–¢–æ–ª—å–∫–æ –ê–Ω—Ç–æ–Ω –ê–Ω–¥—Ä–µ–µ–≤–∏—á —á–∞—Ç–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if queue:
        finished = queue.pop(0)
        if queue:
            bot.reply_to(message, f"–°–ª–µ–¥—É—é—â–∏–π: {queue[0]['username']}")
        else:
            bot.reply_to(message, "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
    else:
        bot.reply_to(message, "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")

# –¢–µ–∫—É—â–∏–π –ø–µ—Ä–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏
@bot.message_handler(commands=['current'])
def handle_next(message):
    if not is_valid_topic(message):
        return
    chat_id = message.chat.id
    queue = get_queue(chat_id)

    if queue:
        bot.reply_to(message, f"–ü–µ—Ä–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏: {queue[0]['username']}")
    else:
        bot.reply_to(message, "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")

# –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω—Ç–æ–Ω –ê–Ω–¥—Ä–µ–µ–≤–∏—á))
@bot.message_handler(commands=['clear'])
def handle_reset(message):
    if not is_valid_topic(message):
        return
    chat_id = message.chat.id
    user_id = message.from_user.id

    if not is_chat_owner(chat_id, user_id):
        bot.reply_to(message, "–¢–æ–ª—å–∫–æ –ê–Ω—Ç–æ–Ω –ê–Ω–¥—Ä–µ–µ–≤–∏—á —á–∞—Ç–∞ –º–æ–∂–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å.")
        return

    queues[chat_id] = []
    bot.reply_to(message, "–û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞.")

# –°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–∏
@bot.message_handler(commands=['list'])
def handle_list(message):
    if not is_valid_topic(message):
        return
    chat_id = message.chat.id
    queue = get_queue(chat_id)

    if not queue:
        bot.reply_to(message, "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        return
    text = "–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:\n"
    for i, user in enumerate(queue, 1):
        text += f"{i}. {user['username']}\n"
    bot.reply_to(message, text)

# –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–ø–µ—Ä–µ–¥ —Å–µ–±—è
@bot.message_handler(commands=['skip'])
def handle_skip(message):
    if not is_valid_topic(message):
        return
    chat_id = message.chat.id
    user_id = message.from_user.id
    queue = get_queue(chat_id)

    for i in range(len(queue)):
        if queue[i]['id'] == user_id:
            if i < len(queue) - 1:
                temp = queue[i]
                queue[i] = queue[i + 1]
                queue[i + 1] = temp
                bot.reply_to(message, f"–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –≤–ø–µ—Ä—ë–¥ {queue[i]['username']}.")
            else:
                bot.reply_to(message, "–í—ã —É–∂–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏.")
            return
    bot.reply_to(message, "–í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏.")

bot.infinity_polling()
